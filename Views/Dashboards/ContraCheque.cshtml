@using AspnetCoreMvcFull.Models;
@model PartialModel;

@{
    ViewData["Title"] = "Contra-Cheque";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="~/vendor/css/contra.css">
}

@section VendorScripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
}

<div class="container mt-5">
    <div class="d-flex justify-content-center align-items-center flex-column">
        <div class="profile-header text-center mb-4">
            <h2 class="display-4">@ViewData["Title"]</h2>
            <p class="text-muted">@Model.funcionario.Nome</p>
        </div>

        @* Date Filter Form *@
        <div class="mb-4">
            <div class="form-group">
                <label for="filterDate">Filtrar por Data:</label>
                <input type="date" id="filterDate" name="filterDate" class="form-control">
            </div>
            <button type="button" class="btn btn-primary" onclick="filterPayslips()">Filtrar</button>
        </div>

        @* List of Payslips *@
        <div id="payslipContainer">
            @foreach (var payslip in Model.Payslips)
            {
                <div class="card shadow-lg mb-4 payslip-item" style="width: 100%; max-width: 1200px;" data-date="@payslip.Date.ToString("yyyy-MM-dd")">
                    <div class="card-body p-4">
                        <div class="text-center mb-4">
                            <div class="pdf-container" data-url="@Url.Content(payslip.Url)"></div>
                        </div>
                        <div class="text-center">
                            @{
                                string url = $"{Guid.NewGuid()}.pdf";
                                <a href="@Url.Content(payslip.Url)" class="btn btn-success btn-lg" download="@url" aria-label="Baixar Contra-Cheque">
                                    <i class="fas fa-download"></i> Baixar Contra-Cheque
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!Model.Payslips.Any())
        {
            <div id="noPayslipAlert" class="alert alert-warning text-center" role="alert">
                <i class="fas fa-exclamation-triangle"></i> Nenhum Contra-Cheque disponível no momento.
            </div>
        }
    </div>
</div>

@section PageScripts {
    <script src="~/js/dashboards-analytics.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function filterPayslips() {
            const filterDate = document.getElementById('filterDate').value;
            const payslips = document.querySelectorAll('.payslip-item');
            let hasVisiblePayslips = false;

            payslips.forEach(payslip => {
                const payslipDate = payslip.getAttribute('data-date');
                if (!filterDate || payslipDate === filterDate) {
                    payslip.style.display = 'block';
                    hasVisiblePayslips = true;
                } else {
                    payslip.style.display = 'none';
                }
            });

            document.getElementById('noPayslipAlert').style.display = hasVisiblePayslips ? 'none' : 'block';
        }

        // Função para carregar o PDF usando PDF.js
        document.addEventListener('DOMContentLoaded', () => {
            const pdfContainers = document.querySelectorAll('.pdf-container');

            pdfContainers.forEach(container => {
                const url = container.getAttribute('data-url');

                if (url) {
                    pdfjsLib.getDocument(url).promise.then(pdf => {
                        pdf.getPage(1).then(page => {
                            const scale = 1.5;
                            const viewport = page.getViewport({ scale });

                            const canvas = document.createElement('canvas');
                            const context = canvas.getContext('2d');
                            canvas.height = viewport.height;
                            canvas.width = viewport.width;
                            container.appendChild(canvas);

                            const renderContext = {
                                canvasContext: context,
                                viewport
                            };
                            page.render(renderContext).promise.then(() => {
                                console.log('Page rendered');
                            });
                        });
                    }).catch(error => {
                        console.error('Error loading PDF:', error);
                    });
                }
            });
        });
    </script>
}
